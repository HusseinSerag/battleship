{"mappings":"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","sources":["<anon>","src/scripts/index.js","src/scripts/ui-components/start.js","src/scripts/components/game.js","src/scripts/components/ship.js","src/scripts/components/gameboard.js","src/scripts/components/player.js"],"sourcesContent":["\nfunction $5b7ece4fa5230e57$export$d6cae3b8b6fbc542() {\n    let container = document.createElement(\"div\");\n    container.classList.add(\"start-container\");\n    let h1 = document.createElement(\"h1\");\n    h1.classList.add(\"welcome-text\");\n    h1.textContent = \"Welcome to Battleship!\";\n    let button = document.createElement(\"button\");\n    button.classList.add(\"start-button\");\n    button.textContent = \"Start\";\n    container.appendChild(h1);\n    container.appendChild(button);\n    return container;\n}\nfunction $5b7ece4fa5230e57$export$63095f455b807d54(boardSize = 100) {\n    let mainContainer = document.createElement(\"div\");\n    mainContainer.classList.add(\"start-and-choice\");\n    let container = document.createElement(\"div\");\n    mainContainer.appendChild($5b7ece4fa5230e57$var$renderBoard(container, boardSize));\n    let choices = document.createElement(\"div\");\n    mainContainer.appendChild($5b7ece4fa5230e57$var$renderChoices(choices));\n    let startGame = document.createElement(\"button\");\n    startGame.classList.add(\"start-game\");\n    startGame.textContent = \"START BATTLE\";\n    mainContainer.appendChild(startGame);\n    return mainContainer;\n}\nfunction $5b7ece4fa5230e57$var$renderChoices(choices) {\n    return choices;\n}\nfunction $5b7ece4fa5230e57$var$renderBoard(container, boardSize) {\n    container.classList.add(\"board-start-container\");\n    for(let i = 0, j = 64; i < 11; i++, j++){\n        let boardDiv = document.createElement(\"div\");\n        if (i == 0) boardDiv.textContent = \"\";\n        else boardDiv.textContent = String.fromCharCode(j);\n        boardDiv.classList.add(\"board-start-div-letters\");\n        container.appendChild(boardDiv);\n    }\n    for(let i = 0; i < boardSize; i++){\n        let boardDiv = document.createElement(\"div\");\n        boardDiv.classList.add(\"board-start-div\");\n        container.appendChild(boardDiv);\n    }\n    for(let i = 0, j = 0; i < 100; j++, i = i + 11){\n        let boardDiv = document.createElement(\"div\");\n        boardDiv.classList.add(\"board-start-div-numbers\");\n        boardDiv.textContent = j + 1;\n        container.insertBefore(boardDiv, Array.from(container.children)[i + 11]);\n    }\n    return container;\n}\nfunction $5b7ece4fa5230e57$export$589f696bd8531d3d() {\n    Array.from(document.body.children).forEach((child)=>{\n        document.body.removeChild(child);\n    });\n}\nfunction $5b7ece4fa5230e57$export$bc46b81a2fe4f424() {\n    Array.from(document.body.children).forEach((child)=>{\n        document.body.removeChild(child);\n    });\n    let mainContainer = document.createElement(\"div\");\n    mainContainer.classList.add(\"game-container\");\n    let player = document.createElement(\"div\");\n    player.classList.add(\"player-container\");\n    let Computer = document.createElement(\"div\");\n    Computer.classList.add(\"computer-container\");\n    player.appendChild($5b7ece4fa5230e57$var$header(\"Your Fleet\"));\n    Computer.appendChild($5b7ece4fa5230e57$var$header(\"Computer's Fleet\"));\n    let containerPlayer = document.createElement(\"div\");\n    let containerComputer = document.createElement(\"div\");\n    player.appendChild($5b7ece4fa5230e57$var$renderBoard(containerPlayer, 100));\n    Computer.appendChild($5b7ece4fa5230e57$var$renderBoard(containerComputer, 100));\n    mainContainer.appendChild(player);\n    mainContainer.appendChild(Computer);\n    return mainContainer;\n}\nfunction $5b7ece4fa5230e57$var$header(text) {\n    let div = document.createElement(\"div\");\n    div.classList.add(\"player-fleet\");\n    div.textContent = text;\n    return div;\n}\nfunction $5b7ece4fa5230e57$export$a0ec1ec39d45f52b(arrayOfDivs, gameBoard, ships) {\n    let gameBoard1D = [];\n    for(let i = 0; i < 10; i++)for(let j = 0; j < 10; j++)gameBoard1D.push(gameBoard.board[i][j]);\n    for(let i = 0; i < gameBoard1D.length; i++)if (gameBoard1D[i]) {\n        for(let j = 0; j < ships.length; j++)if (ships[j] == gameBoard1D[i]) {\n            let picked = document.createElement(\"div\");\n            picked.classList.add(`picked-ball-${ships[j].getLength()}`);\n            arrayOfDivs[i].classList.add(`picked-${ships[j].getLength()}`);\n            arrayOfDivs[i].appendChild(picked);\n        }\n    }\n}\nfunction $5b7ece4fa5230e57$export$d141bba7fdc215a3() {\n    console.log(1);\n}\nfunction $5b7ece4fa5230e57$export$5599a367734a1c3(winner) {\n    let container = document.createElement(\"div\");\n    container.classList.add(\"end-game\");\n    let shadow = document.createElement(\"div\");\n    shadow.classList.add(\"shadow\");\n    let resetButton = document.createElement(\"button\");\n    resetButton.classList.add(\"reset-btn\");\n    let winnerText = document.createElement(\"div\");\n    winnerText.classList.add(\"winner-text\");\n    winnerText.textContent = `${winner} has won the game!`;\n    container.appendChild(winnerText);\n    container.appendChild(resetButton);\n    return [\n        container,\n        shadow\n    ];\n}\n\n\nvar $7243ad477e9fa3eb$exports = {};\nvar $a86bbb7b325f9997$exports = {};\nconst $a86bbb7b325f9997$var$Ship = function() {\n    const createShip = (length, numberOfHits, isShipSunk)=>{\n        let shipLength = length;\n        let shipNumberOfHits = numberOfHits;\n        let shipIsSunk = isShipSunk;\n        const getLength = ()=>shipLength;\n        const setLength = (newLength)=>{\n            shipLength = newLength;\n        };\n        const getNumberOfHits = ()=>shipNumberOfHits;\n        const setNumberOfHits = (newNumberOfHits)=>{\n            shipNumberOfHits = newNumberOfHits;\n        };\n        const incrementNumberOfHits = ()=>shipNumberOfHits++;\n        const getIsSunk = ()=>shipIsSunk;\n        const setIsSunk = (newIsSunk)=>{\n            shipIsSunk = newIsSunk;\n        };\n        const hit = ()=>{\n            incrementNumberOfHits(getNumberOfHits());\n        };\n        const isSunk = ()=>{\n            if (getNumberOfHits() == getLength()) setIsSunk(true);\n            return getIsSunk();\n        };\n        return {\n            getLength: getLength,\n            setLength: setLength,\n            getNumberOfHits: getNumberOfHits,\n            setNumberOfHits: setNumberOfHits,\n            getIsSunk: getIsSunk,\n            setIsSunk: setIsSunk,\n            hit: hit,\n            isSunk: isSunk\n        };\n    };\n    return {\n        createShip: createShip\n    };\n}();\n$a86bbb7b325f9997$exports = $a86bbb7b325f9997$var$Ship;\n\n\nvar $d3c6c303da2b5192$exports = {};\nconst $d3c6c303da2b5192$var$gameBoard = function() {\n    const createGameBoard = ()=>{\n        const size = 10;\n        let board = [];\n        let missedHits = [];\n        let ships = [];\n        let shipHits = [];\n        let allHits = [];\n        const initalizeBoard = ()=>{\n            for(let i = 0; i < size; i++)board.push([\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ]);\n        };\n        const clearBoard = ()=>{\n            board = [];\n        };\n        const validatePlacement = (ship, isHorizontal, row, column)=>{\n            for(let i = 0; i < ship.getLength(); i++)if (isHorizontal) {\n                if (column + i > 9 || board[row][column + i] != 0) return false;\n            } else {\n                if (row + i > 9 || board[row + i][column] != 0) return false;\n            }\n            return true;\n        };\n        const placeShip = (ship, isHorizontal, row, column)=>{\n            if (!validatePlacement(ship, isHorizontal, row, column)) throw new Error();\n            for(let i = 0; i < ship.getLength(); i++)if (isHorizontal) board[row][column + i] = ship;\n            else board[row + i][column] = ship;\n            ships.push(ship);\n            return board;\n        };\n        const receiveAttack = ([row, column])=>{\n            allHits.forEach((hit)=>{\n                let [a, b] = [\n                    ...hit\n                ];\n                if (a == row && b == column) throw new Error();\n            });\n            if (board[row][column]) {\n                shipHits.forEach((hit)=>{\n                    let [a, b] = [\n                        ...hit\n                    ];\n                    if (a == row && b == column) throw new Error();\n                });\n                board[row][column].hit();\n                shipHits.push([\n                    row,\n                    column\n                ]);\n                allHits.push([\n                    row,\n                    column\n                ]);\n                return true;\n            }\n            missedHits.push([\n                row,\n                column\n            ]);\n            allHits.push([\n                row,\n                column\n            ]);\n            return false;\n        };\n        const getMissedHits = ()=>missedHits;\n        const getHits = ()=>shipHits;\n        const getShips = ()=>ships;\n        const didAllSink = ()=>{\n            for(let i = 0; i < ships.length; i++){\n                if (!ships[i].isSunk()) return false;\n            }\n            return true;\n        };\n        return {\n            placeShip: placeShip,\n            initalizeBoard: initalizeBoard,\n            clearBoard: clearBoard,\n            receiveAttack: receiveAttack,\n            getMissedHits: getMissedHits,\n            didAllSink: didAllSink,\n            getHits: getHits,\n            board: board,\n            allHits: allHits,\n            getShips: getShips\n        };\n    };\n    return {\n        createGameBoard: createGameBoard\n    };\n}();\n$d3c6c303da2b5192$exports = $d3c6c303da2b5192$var$gameBoard;\n\n\nvar $48e870925cfd6128$exports = {};\nconst $48e870925cfd6128$var$Player = function() {\n    let currentPlayer;\n    const setCurrentPlayer = (player)=>{\n        currentPlayer = player;\n    };\n    const getCurrentPlayer = ()=>currentPlayer;\n    const changeCurrentPlayer = (player, player2)=>{\n        if (currentPlayer == player) currentPlayer = player2;\n        else if (currentPlayer == player2) currentPlayer = player;\n    };\n    const createPlayer = (type, playerName)=>{\n        const attack = (row, column)=>{\n            return [\n                row,\n                column\n            ];\n        };\n        let playerUserName = playerName;\n        const randAttack = (sizeOfBoard)=>{\n            let randomXcoordinate = Math.floor(Math.random() * sizeOfBoard);\n            let randomYcoordinate = Math.floor(Math.random() * sizeOfBoard);\n            return [\n                randomXcoordinate,\n                randomYcoordinate\n            ];\n        };\n        if (type == \"AI\") return Object.assign({}, {\n            randAttack: randAttack,\n            playerUserName: playerUserName\n        });\n        return Object.assign({}, {\n            attack: attack,\n            playerUserName: playerUserName\n        });\n    };\n    return {\n        createPlayer: createPlayer,\n        setCurrentPlayer: setCurrentPlayer,\n        getCurrentPlayer: getCurrentPlayer,\n        changeCurrentPlayer: changeCurrentPlayer\n    };\n}();\n$48e870925cfd6128$exports = $48e870925cfd6128$var$Player;\n\n\nconst $7243ad477e9fa3eb$var$game = function() {\n    let shipLengths = [\n        2,\n        3,\n        3,\n        4,\n        5\n    ];\n    let playerBoard;\n    let enemyBoard;\n    let player1;\n    let player2;\n    let ship1;\n    let ship2;\n    let ship3;\n    const startGame = ()=>{\n        playerBoard = $d3c6c303da2b5192$exports.createGameBoard();\n        enemyBoard = $d3c6c303da2b5192$exports.createGameBoard();\n        playerBoard.initalizeBoard();\n        enemyBoard.initalizeBoard();\n        ship1 = $a86bbb7b325f9997$exports.createShip(3, 0, false);\n        ship2 = $a86bbb7b325f9997$exports.createShip(3, 0, false);\n        ship3 = $a86bbb7b325f9997$exports.createShip(6, 0, false);\n        playerBoard.placeShip(ship1, true, 0, 0);\n        playerBoard.placeShip(ship3, false, 2, 2);\n        let j = 0;\n        let trueOrFalse = [\n            true,\n            false\n        ];\n        while(j < shipLengths.length)try {\n            let ship = $a86bbb7b325f9997$exports.createShip(shipLengths[j], 0, false);\n            enemyBoard.placeShip(ship, trueOrFalse[Math.floor(Math.random() * trueOrFalse.length)], Math.floor(Math.random() * 10), Math.floor(Math.random() * 10));\n            j++;\n        } catch (Error1) {}\n        player1 = $48e870925cfd6128$exports.createPlayer(\"\", \"P1\");\n        player2 = $48e870925cfd6128$exports.createPlayer(\"AI\", \"P2\");\n        $48e870925cfd6128$exports.setCurrentPlayer(player1);\n    };\n    const getPlayerBoard = ()=>playerBoard;\n    const getEnemyBoard = ()=>enemyBoard;\n    const playRound = (number, attacker)=>{\n        let coord = String(number);\n        if (coord.length == 1) coord = \"0\" + coord;\n        let [row, column] = [\n            ...coord.split(\"\").map(Number)\n        ];\n        console.log(`${$48e870925cfd6128$exports.getCurrentPlayer().playerUserName}'s turn`);\n        if ($48e870925cfd6128$exports.getCurrentPlayer() == player1 && attacker == \"Computer\") throw new Error(\"Wrong Board\");\n        else if ($48e870925cfd6128$exports.getCurrentPlayer() == player2 && attacker == \"Player\") {\n            $48e870925cfd6128$exports.changeCurrentPlayer(player2, player1);\n            throw new Error(\"Wrong Board\");\n        }\n        if (attacker == \"Player\") try {\n            let result = enemyBoard.receiveAttack([\n                row,\n                column\n            ]);\n            let isSunken = enemyBoard.didAllSink();\n            $48e870925cfd6128$exports.changeCurrentPlayer(player2, player1);\n            return [\n                result,\n                isSunken\n            ];\n        } catch (err) {\n            console.log(err);\n            throw err;\n        }\n    };\n    const AIMove = ()=>{\n        while(true)try {\n            let yCoord = Math.floor(Math.random() * 10);\n            let xCoord = Math.floor(Math.random() * 10);\n            let result = playerBoard.receiveAttack([\n                xCoord,\n                yCoord\n            ]);\n            let isSunken = playerBoard.didAllSink();\n            console.log(playerBoard.board);\n            console.log(playerBoard.getMissedHits());\n            console.log(playerBoard.getHits());\n            $48e870925cfd6128$exports.changeCurrentPlayer(player2, player1);\n            return [\n                xCoord,\n                yCoord,\n                result,\n                isSunken\n            ];\n        } catch  {\n            console.log(\"didnt break\");\n        }\n    };\n    return {\n        startGame: startGame,\n        getPlayerBoard: getPlayerBoard,\n        getEnemyBoard: getEnemyBoard,\n        playRound: playRound,\n        AIMove: AIMove,\n        player1: player1,\n        player2: player2\n    };\n}();\n$7243ad477e9fa3eb$exports = $7243ad477e9fa3eb$var$game;\n\n\nlet $cba3eb2abed8e80a$var$gamePlayBoard = $5b7ece4fa5230e57$export$bc46b81a2fe4f424();\nlet $cba3eb2abed8e80a$var$playerBoard;\nlet $cba3eb2abed8e80a$var$computerBoard;\nlet $cba3eb2abed8e80a$var$shipRendering = $5b7ece4fa5230e57$export$63095f455b807d54();\nlet $cba3eb2abed8e80a$var$startGame = $cba3eb2abed8e80a$var$shipRendering.querySelector(\".start-game\");\nlet $cba3eb2abed8e80a$var$startScreen = $5b7ece4fa5230e57$export$d6cae3b8b6fbc542();\ndocument.body.appendChild($cba3eb2abed8e80a$var$startScreen);\nlet $cba3eb2abed8e80a$var$startBtn = $cba3eb2abed8e80a$var$startScreen.querySelector(\".start-button\");\n$cba3eb2abed8e80a$var$startBtn.addEventListener(\"click\", ()=>{\n    $5b7ece4fa5230e57$export$589f696bd8531d3d();\n    document.body.appendChild($cba3eb2abed8e80a$var$shipRendering);\n});\nlet $cba3eb2abed8e80a$var$isAllSunk = false;\n$cba3eb2abed8e80a$var$startGame.addEventListener(\"click\", ()=>{\n    $5b7ece4fa5230e57$export$589f696bd8531d3d();\n    $7243ad477e9fa3eb$exports.startGame();\n    document.body.appendChild($cba3eb2abed8e80a$var$gamePlayBoard);\n    $cba3eb2abed8e80a$var$renderGame($cba3eb2abed8e80a$var$gamePlayBoard);\n});\nfunction $cba3eb2abed8e80a$var$renderGame() {\n    console.log(\"here\");\n    $cba3eb2abed8e80a$var$playerBoard = $cba3eb2abed8e80a$var$gamePlayBoard.querySelectorAll(\".player-container .board-start-container .board-start-div\");\n    $cba3eb2abed8e80a$var$computerBoard = $cba3eb2abed8e80a$var$gamePlayBoard.querySelectorAll(\".computer-container .board-start-container .board-start-div\");\n    $5b7ece4fa5230e57$export$a0ec1ec39d45f52b($cba3eb2abed8e80a$var$playerBoard, $7243ad477e9fa3eb$exports.getPlayerBoard(), $7243ad477e9fa3eb$exports.getPlayerBoard().getShips());\n    $5b7ece4fa5230e57$export$a0ec1ec39d45f52b($cba3eb2abed8e80a$var$computerBoard, $7243ad477e9fa3eb$exports.getEnemyBoard(), $7243ad477e9fa3eb$exports.getEnemyBoard().getShips());\n    let chosenX, chosenY, result, sunk = false;\n    let hit;\n    for(let i = 0; i < $cba3eb2abed8e80a$var$computerBoard.length; i++)$cba3eb2abed8e80a$var$computerBoard[i].addEventListener(\"click\", ()=>{\n        if ($cba3eb2abed8e80a$var$isAllSunk == false) try {\n            [hit, $cba3eb2abed8e80a$var$isAllSunk] = $7243ad477e9fa3eb$exports.playRound(i, \"Player\");\n            if (hit) Array.from($cba3eb2abed8e80a$var$computerBoard[i].children)[0].classList.add(\"visible\");\n            else {\n                let div = document.createElement(\"div\");\n                div.classList.add(\"missed\");\n                $cba3eb2abed8e80a$var$computerBoard[i].appendChild(div);\n            }\n            if ($cba3eb2abed8e80a$var$isAllSunk) {\n                $cba3eb2abed8e80a$var$gamePlayBoard = $5b7ece4fa5230e57$export$bc46b81a2fe4f424();\n                $cba3eb2abed8e80a$var$isAllSunk = false;\n                $5b7ece4fa5230e57$export$589f696bd8531d3d();\n                $5b7ece4fa5230e57$export$d141bba7fdc215a3();\n                let [containerDone, shadowDone] = $5b7ece4fa5230e57$export$5599a367734a1c3($7243ad477e9fa3eb$exports.player1.playerUserName);\n                document.body.appendChild(containerDone);\n                document.body.appendChild(shadowDone);\n            } else if (sunk == false) {\n                [chosenX, chosenY, result, sunk] = [\n                    ...$7243ad477e9fa3eb$exports.AIMove()\n                ];\n                console.log(chosenX, chosenY, result, sunk);\n                if (!result) {\n                    if (chosenX == 0) {\n                        let div = document.createElement(\"div\");\n                        div.classList.add(\"missed\");\n                        $cba3eb2abed8e80a$var$playerBoard[chosenY].appendChild(div);\n                    } else {\n                        let stringNumber = `${chosenX}${chosenY}`;\n                        let number = Number(stringNumber);\n                        console.log(number);\n                        let div = document.createElement(\"div\");\n                        div.classList.add(\"missed\");\n                        $cba3eb2abed8e80a$var$playerBoard[number].appendChild(div);\n                    }\n                } else if (chosenX == 0) Array.from($cba3eb2abed8e80a$var$playerBoard[chosenY].children)[0].classList.add(\"hit\");\n                else {\n                    let stringNumber = `${chosenX}${chosenY}`;\n                    let number = Number(stringNumber);\n                    console.log(number);\n                    Array.from($cba3eb2abed8e80a$var$playerBoard[number].children)[0].classList.add(\"hit\");\n                }\n                if (sunk) {\n                    $cba3eb2abed8e80a$var$gamePlayBoard = $5b7ece4fa5230e57$export$bc46b81a2fe4f424();\n                    sunk = false;\n                    $5b7ece4fa5230e57$export$589f696bd8531d3d();\n                    let [container, shadow] = $5b7ece4fa5230e57$export$5599a367734a1c3($7243ad477e9fa3eb$exports.player2.playerUserName);\n                    document.body.appendChild(container);\n                    document.body.appendChild(shadow);\n                }\n            }\n        } catch (error) {}\n    });\n}\n\n\n//# sourceMappingURL=index.e1245a21.js.map\n","import * as DOM from './ui-components/start.js'\nconst Game = require('./components/game.js')\n\n\nlet gamePlayBoard = DOM.gamePlay()\nlet playerBoard\nlet computerBoard\n\nlet shipRendering = DOM.renderPlaceShipsOnBoard()\nlet startGame = shipRendering.querySelector('.start-game')\n\nlet startScreen = DOM.renderStart()\ndocument.body.appendChild(startScreen)\nlet startBtn = startScreen.querySelector('.start-button')\n\nstartBtn.addEventListener('click',()=>{\n    DOM.clearScreen()\n    document.body.appendChild(shipRendering)\n    \n})\n\nlet isAllSunk = false\nstartGame.addEventListener('click',()=>{\n    DOM.clearScreen()\n    Game.startGame()\n    document.body.appendChild(gamePlayBoard)\n    renderGame(gamePlayBoard)\n})\n\nfunction renderGame(){\n    console.log('here')\n    playerBoard = gamePlayBoard.querySelectorAll('.player-container .board-start-container .board-start-div')\n     computerBoard = gamePlayBoard.querySelectorAll('.computer-container .board-start-container .board-start-div')\n    \n    DOM.populateBoard(playerBoard,Game.getPlayerBoard(),Game.getPlayerBoard().getShips())\n    DOM.populateBoard(computerBoard,Game.getEnemyBoard(),Game.getEnemyBoard().getShips())\n    \nlet chosenX , chosenY , result , sunk = false\nlet hit\nfor(let i = 0 ; i < computerBoard.length ; i++){\n    computerBoard[i].addEventListener('click',()=>{\n         \n        if(isAllSunk == false){\n            try{\n                [hit, isAllSunk ]=  Game.playRound(i,'Player')\n                \n                \n\n                \n               if(hit)\n               {\n                Array.from((computerBoard[i]).children)[0].classList.add('visible')\n               }\n               else{\n                let div = document.createElement('div')\n                div.classList.add('missed')\n                computerBoard[i].appendChild(div)\n               }\n               if(isAllSunk){\n                    gamePlayBoard = DOM.gamePlay()\n                    isAllSunk = false\n                    DOM.clearScreen()\n                    DOM.x()\n                    let [containerDone,shadowDone] = DOM.endGame(Game.player1.playerUserName)\n                    document.body.appendChild(containerDone)\n                    document.body.appendChild(shadowDone)\n               \n               }\n               else{\n                if(sunk == false){\n                    [chosenX , chosenY , result , sunk] = [...Game.AIMove()]\n                console.log(chosenX , chosenY , result , sunk)\n                if(!result)\n                {\n                    if(chosenX == 0){\n                        let div = document.createElement('div')\n                    div.classList.add('missed')\n                    playerBoard[chosenY].appendChild(div)\n                        \n                    }else{\n                        let stringNumber = `${chosenX}${chosenY}`\n                        let number = Number(stringNumber)\n                        console.log(number)\n                        let div = document.createElement('div')\n                    div.classList.add('missed')\n                    playerBoard[number].appendChild(div)\n                    }\n                }\n                else{\n                    if(chosenX == 0){\n                        \n                    Array.from((playerBoard[chosenY]).children)[0].classList.add('hit')\n                        \n                    }else{\n                        let stringNumber = `${chosenX}${chosenY}`\n                        let number = Number(stringNumber)\n                        console.log(number)\n                        Array.from((playerBoard[number]).children)[0].classList.add('hit')\n                    }\n                }\n                if(sunk){\n                    gamePlayBoard = DOM.gamePlay()\n                    sunk = false\n                    \n                DOM.clearScreen()\n                let [container,shadow] = DOM.endGame(Game.player2.playerUserName)\n                document.body.appendChild(container)\n                document.body.appendChild(shadow)\n                \n                \n               \n                }\n                }\n                \n               }\n               \n            }catch(error){\n                \n            }\n        }\n        \n        \n       \n    })\n}\n}\n\n\n","import '../../styles/start.css'\nexport function renderStart(){\n   \n    let container = document.createElement('div')\n    container.classList.add('start-container')\n\n    let h1 = document.createElement('h1')\n    h1.classList.add('welcome-text')\n    h1.textContent = 'Welcome to Battleship!'\n\n    let button = document.createElement('button')\n    button.classList.add('start-button')\n    button.textContent = 'Start'\n\n    container.appendChild(h1)\n    container.appendChild(button)\n    return container\n}\n\nexport function renderPlaceShipsOnBoard(boardSize=100){\n    \n    let mainContainer = document.createElement('div')\n    mainContainer.classList.add('start-and-choice')\n     let container = document.createElement('div')\n        mainContainer.appendChild(renderBoard(container,boardSize))\n        let choices = document.createElement('div')\n        mainContainer.appendChild(renderChoices(choices))\n        let startGame = document.createElement('button')\n        startGame.classList.add('start-game')\n        startGame.textContent = 'START BATTLE'\n        mainContainer.appendChild(startGame)\n        return mainContainer\n}\n\nfunction renderChoices(choices){\n    return choices\n}\nfunction renderBoard(container,boardSize){\n    container.classList.add('board-start-container')\n    for(let i = 0 , j = 64 ; i < 11 ; i++ , j++){\n        let boardDiv = document.createElement('div')\n        if(i == 0){\n            boardDiv.textContent = ''\n        }\n        else{\n            boardDiv.textContent = String.fromCharCode(j)\n        }\n        \n        boardDiv.classList.add('board-start-div-letters')\n        container.appendChild(boardDiv)\n    }\n\n    for(let i = 0 ; i < boardSize  ; i++){\n        let boardDiv = document.createElement('div')\n\n        boardDiv.classList.add('board-start-div')\n        container.appendChild(boardDiv)\n    }\n    for(let i = 0 , j = 0 ; i < 100 ; j++,i = i+11){\n        let boardDiv = document.createElement('div')\n        boardDiv.classList.add('board-start-div-numbers')\n        boardDiv.textContent = j + 1\n        container.insertBefore(boardDiv,Array.from(container.children)[i+11])\n        \n    }\n    return container\n}\n\nexport function clearScreen(){\n    Array.from(document.body.children).forEach(child=>{\n        document.body.removeChild(child)\n    })\n}\n\nexport function gamePlay(){\n    Array.from(document.body.children).forEach(child=>{\n        document.body.removeChild(child)\n    })\n    let mainContainer = document.createElement('div')\n    mainContainer.classList.add('game-container')\n\n    let player = document.createElement('div')\n    player.classList.add('player-container')\n    let Computer = document.createElement('div')\n    Computer.classList.add('computer-container')\n\n    player.appendChild(header('Your Fleet'))\n    Computer.appendChild(header('Computer\\'s Fleet'))\n    let containerPlayer = document.createElement('div')\n    let containerComputer = document.createElement('div')\n    player.appendChild(renderBoard(containerPlayer , 100))\n    Computer.appendChild(renderBoard(containerComputer , 100))\n\n    mainContainer.appendChild(player)\n    mainContainer.appendChild(Computer)\n    return mainContainer\n}\n\nfunction header(text){\n    let div = document.createElement('div')\n    div.classList.add('player-fleet')\n    div.textContent = text\n    return div\n    \n}\n\n\nexport function populateBoard(arrayOfDivs , gameBoard,ships){\n    let gameBoard1D = []\n    \n    for(let i = 0 ; i < 10; i++){\n        for(let j = 0 ;  j < 10 ; j++){\n            gameBoard1D.push(gameBoard.board[i][j])\n        }\n    }\n   \n    for(let i = 0 ; i < gameBoard1D.length ; i++){\n        if(gameBoard1D[i]){\n            for(let j = 0 ; j < ships.length ; j++){\n                if(ships[j] == gameBoard1D[i]){\n                    \n                    \n                    \n                    let picked = document.createElement('div')\n                    picked.classList.add(`picked-ball-${ships[j].getLength()}`)\n                    arrayOfDivs[i].classList.add(`picked-${ships[j].getLength()}`)\n                    arrayOfDivs[i].appendChild(picked)\n                }\n                \n            }\n            \n        }\n    }\n\n}\n\nexport function x(){\n    console.log(1)\n}\nexport function endGame(winner){\n    \n    let container = document.createElement('div')\n    container.classList.add('end-game')\n    let shadow = document.createElement('div')\n    shadow.classList.add('shadow')\n    let resetButton = document.createElement('button')\n    resetButton.classList.add('reset-btn')\n    let winnerText = document.createElement('div')\n    winnerText.classList.add('winner-text')\n    winnerText.textContent = `${winner} has won the game!`\n    container.appendChild(winnerText)\n    container.appendChild(resetButton)\n    return [container,shadow]\n}","const Ship = require('./ship.js')\nconst gameBoard = require('./gameboard.js')\nconst Player = require('./player.js')\n\n const game = (function(){\n    let shipLengths = [2,3,3,4,5]\n    let playerBoard;\n    let enemyBoard;\n    let player1;\n    let player2;\n   let ship1\n   let ship2;\n   let ship3;\n    const startGame = () =>{\n        playerBoard = gameBoard.createGameBoard()\n        enemyBoard = gameBoard.createGameBoard()\n        playerBoard.initalizeBoard()\n        enemyBoard.initalizeBoard()\n        ship1 = Ship.createShip(3,0,false)\n        ship2 = Ship.createShip(3,0,false)\n        ship3 = Ship.createShip(6,0,false)\n        playerBoard.placeShip(ship1,true,0,0)\n        playerBoard.placeShip(ship3,false,2,2)\n       let j = 0 \n       let trueOrFalse = [true,false]\n       while(j < shipLengths.length){\n        try{\n            let ship = Ship.createShip(shipLengths[j],0,false)\n            enemyBoard.placeShip(ship,trueOrFalse[Math.floor(Math.random()*trueOrFalse.length)],Math.floor(Math.random()*10),Math.floor(Math.random()*10))\n            j++\n        }catch(Error){\n\n        }\n       }\n        \n        player1 = Player.createPlayer('','P1')\n        player2 = Player.createPlayer('AI','P2')\n        Player.setCurrentPlayer(player1)\n        \n    }\n    \n    const getPlayerBoard = () => playerBoard\n    const getEnemyBoard = () => enemyBoard\n    const playRound = (number,attacker) =>{\n        let coord = String(number)\n        if (coord.length == 1){\n            coord = '0'+coord\n        }\n        \n       let [row,column] = [...coord.split('').map(Number)]\n        console.log(`${Player.getCurrentPlayer().playerUserName}'s turn`)\n        if(Player.getCurrentPlayer() == player1 && attacker == 'Computer'){\n            throw new Error('Wrong Board')\n        }\n        else if(Player.getCurrentPlayer() == player2 && attacker == 'Player'){\n            Player.changeCurrentPlayer(player2 , player1)\n            throw new Error('Wrong Board')\n        }\n        if(attacker == 'Player'){\n            try{\n                \n                let result = enemyBoard.receiveAttack([row,column])\n                let isSunken = enemyBoard.didAllSink()\n                Player.changeCurrentPlayer(player2 , player1)\n                \n                return [result,isSunken]\n                \n            }\n            catch(err){\n                console.log(err)\n                throw err\n            }\n        }\n        \n\n    }\n    const AIMove = () =>{\n        while(true){\n            try{\n               let yCoord = Math.floor(Math.random()*10)\n               let xCoord = Math.floor(Math.random()*10)\n                let result = playerBoard.receiveAttack([xCoord,yCoord])\n                let isSunken = playerBoard.didAllSink()\n                console.log(playerBoard.board)\n                console.log(playerBoard.getMissedHits())\n                console.log(playerBoard.getHits())\n                Player.changeCurrentPlayer(player2 , player1)\n                return [xCoord,yCoord,result,isSunken]\n            }catch{\n                console.log('didnt break')\n\n            }\n        }\n        \n    }\n    return {startGame,getPlayerBoard,getEnemyBoard,playRound,AIMove,player1,player2}\n})()\n\nmodule.exports = game\n","const Ship = (function(){\n    const createShip = (length,numberOfHits, isShipSunk) =>{\n        let shipLength = length\n        let shipNumberOfHits = numberOfHits\n        let shipIsSunk = isShipSunk\n        const getLength = () => shipLength\n        const setLength = (newLength) =>{\n            shipLength = newLength\n        }\n        const getNumberOfHits = () => shipNumberOfHits\n        const setNumberOfHits = (newNumberOfHits) =>{\n            shipNumberOfHits = newNumberOfHits\n        }\n        const incrementNumberOfHits = () => \n            shipNumberOfHits++\n        \n        const getIsSunk = () => shipIsSunk\n        const setIsSunk = (newIsSunk) => {\n            shipIsSunk = newIsSunk\n        } \n        const hit = () =>{\n            incrementNumberOfHits(getNumberOfHits())\n        }\n        const isSunk = () =>{\n            if(getNumberOfHits() == getLength())\n            setIsSunk(true)\n        return getIsSunk()\n        }\n        return {getLength , setLength , getNumberOfHits , setNumberOfHits , getIsSunk , setIsSunk , hit , isSunk}\n    }\n    return {createShip}\n})()\nmodule.exports = Ship","const gameBoard = (function(){\n    const createGameBoard = () =>{\n        const size = 10\nlet board =[]\nlet missedHits = []\nlet ships = []\nlet shipHits = []\nlet allHits = []\nconst initalizeBoard = () =>{\n    for(let i = 0 ; i < size ; i++){\n        board.push([0,0,0,0,0,0,0,0,0,0])\n    }\n\n}\nconst clearBoard = () =>{\n    board = []\n}\nconst validatePlacement = (ship,isHorizontal,row,column) =>{\n    for(let i = 0 ; i < ship.getLength();i++){\n        if(isHorizontal){\n            if(column + i > 9 || board[row][column+i] != 0){\n                return false\n            }\n        }\n        else{\n            if(row + i > 9 || board[row+i][column] !=0){\n                return false\n            }\n        }\n    }\n    return true\n}\nconst placeShip = (ship,isHorizontal,row,column) =>{\n    if(!validatePlacement(ship,isHorizontal,row,column)) throw new Error()\n    for(let i = 0 ; i < ship.getLength() ; i++){\n        if(isHorizontal){\n            \n            board[row][column+i] = ship\n        }\n        else{\n            board[row+i][column] = ship\n        }\n    }\n    \n    ships.push(ship)\n    return board\n    \n}\nconst receiveAttack = ([row,column]) =>{\n    allHits.forEach(hit=>{\n        let [a,b] = [...hit]\n        if(a == row && b == column){\n            throw new Error()\n        }\n    })\n    if(board[row][column]){\n\n        shipHits.forEach(hit =>{\n            let [a,b] = [...hit]\n            if(a == row && b == column){\n                throw new Error()\n            }\n        })\n        \n        \n            board[row][column].hit()\n            shipHits.push([row,column])\n            allHits.push([row,column])\n            return true\n        \n        \n        \n        \n    }\n    missedHits.push([row,column])\n    allHits.push([row,column])\n    return false\n}\nconst getMissedHits = () => missedHits\nconst getHits = () => shipHits\nconst getShips = () => ships\nconst didAllSink = () => {\n    for(let i = 0 ; i < ships.length ; i++){\n        if(!ships[i].isSunk()){\n            return false\n        }\n    }\n    return true\n}\nreturn {placeShip,initalizeBoard,clearBoard , receiveAttack,getMissedHits , didAllSink ,getHits,board,allHits , getShips}\n    }\nreturn {createGameBoard}\n})()\n\nmodule.exports = gameBoard\n","const Player = (function(){\n  let currentPlayer;\n  const setCurrentPlayer = (player) =>{\n    currentPlayer = player\n  }\n  const getCurrentPlayer = () => currentPlayer\n\n  const changeCurrentPlayer =(player,player2) =>{\n    if(currentPlayer==player){\n      currentPlayer = player2\n    }\n    else if(currentPlayer == player2){\n      currentPlayer = player\n    }\n  }\n    const createPlayer = (type,playerName) =>{\n      const attack = (row,column) => \n      {\n            return [row,column]\n        \n      }\n      \n     let playerUserName = playerName\n      const randAttack = (sizeOfBoard) =>{\n        \n        let randomXcoordinate = Math.floor(Math.random()*sizeOfBoard)\n        let randomYcoordinate = Math.floor(Math.random()*sizeOfBoard) \n        \n        \n        \n        return [randomXcoordinate,randomYcoordinate]\n      }\n\n      \n    if(type == 'AI')\n    return Object.assign({},{randAttack,playerUserName})\n      return Object.assign({},{attack,playerUserName})\n    }\n    \n    return {createPlayer,setCurrentPlayer,getCurrentPlayer,changeCurrentPlayer}\n})()\nmodule.exports = Player"],"names":["$cba3eb2abed8e80a$var$playerBoard","$cba3eb2abed8e80a$var$computerBoard","currentPlayer","playerBoard","enemyBoard","player1","player2","ship1","ship3","shipLengths","container","h1","button","$5b7ece4fa5230e57$var$renderBoard","boardSize","classList","add","i","j","boardDiv","document","createElement","textContent","String","fromCharCode","appendChild","insertBefore","Array","from","children","$5b7ece4fa5230e57$export$589f696bd8531d3d","body","forEach","child","removeChild","$5b7ece4fa5230e57$export$bc46b81a2fe4f424","mainContainer","player","Computer","$5b7ece4fa5230e57$var$header","containerPlayer","containerComputer","text","div","$5b7ece4fa5230e57$export$a0ec1ec39d45f52b","arrayOfDivs","gameBoard","ships","gameBoard1D","push","board","length","picked","getLength","$5b7ece4fa5230e57$export$5599a367734a1c3","winner","shadow","resetButton","winnerText","$7243ad477e9fa3eb$exports","$a86bbb7b325f9997$exports","createShip","numberOfHits","isShipSunk","shipLength","shipNumberOfHits","shipIsSunk","getNumberOfHits","incrementNumberOfHits","getIsSunk","setIsSunk","newIsSunk","setLength","newLength","setNumberOfHits","newNumberOfHits","hit","isSunk","$d3c6c303da2b5192$exports","createGameBoard","missedHits","shipHits","allHits","validatePlacement","ship","isHorizontal","row","column","placeShip","Error","initalizeBoard","clearBoard","receiveAttack","a","b","getMissedHits","didAllSink","getHits","getShips","$48e870925cfd6128$exports","createPlayer","type","playerName","Object","assign","randAttack","sizeOfBoard","Math","floor","random","playerUserName","attack","setCurrentPlayer","getCurrentPlayer","changeCurrentPlayer","startGame","trueOrFalse","Error1","getPlayerBoard","getEnemyBoard","playRound","number","attacker","coord","split","map","Number","console","log","result","isSunken","err","AIMove","yCoord","xCoord","$cba3eb2abed8e80a$var$gamePlayBoard","$cba3eb2abed8e80a$var$shipRendering","$5b7ece4fa5230e57$export$63095f455b807d54","choices","$cba3eb2abed8e80a$var$startGame","querySelector","$cba3eb2abed8e80a$var$startScreen","$cba3eb2abed8e80a$var$startBtn","addEventListener","$cba3eb2abed8e80a$var$isAllSunk","$cba3eb2abed8e80a$var$renderGame","querySelectorAll","chosenX","chosenY","sunk","containerDone","shadowDone","stringNumber","error"],"version":3,"file":"index.e1245a21.js.map"}